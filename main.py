from aiogram import Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from base import create_table

from aiogram import executor
from aiogram.types import *
from model import Task_list

TOKEN = '6333919153:AAHzjso9BpSibl0RB6Gd-1gZd3lgkC3H1sA'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

@dp.message_handler(commands=["start", "help"])
async def start(message: Message ):
    await message.answer ("–ü—Ä–∏–≤–µ—Ç! –¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç –∑–∞–¥–∞—á. –í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n" \
                 "/add <–∑–∞–¥–∞—á–∞> - –¥–æ–±–∞–≤—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É üìù\n" \
                 "/done <–∏–Ω–¥–µ–∫—Å> - –µ—Å–ª–∏ —Ç—ã —Å–¥–µ–ª–∞–ª –∑–∞–¥–∞—á—É üëå\n" \
                 "/list - –≤—Å–µ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á üìã\n" \
                 "/delete <–∏–Ω–¥–µ–∫—Å> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É üöΩ\n")
    

@dp.message_handler(commands=["add"])
async def add(message: Message):
    task_text = message.text[5:].strip() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "/add "
    if not task_text:   
        await message.reply('–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏')
        return
    
    task = Task_list(task_text, "–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    task.save()
    await message.reply("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

@dp.message_handler(commands=["done"])
async def done(message: Message):
    task_id = int(message.text[6:])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "/done "
    tasks = Task_list.get_all()

    if task_id < 1 or task_id > len(tasks) :
        await message.reply("–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ !")
        return

    task = tasks[task_id - 1]
    Task_list.mark_as_done(task_id)
    await message.reply(f"–ó–∞–¥–∞—á–∞ '{task.title}' —Å–¥–µ–ª–∞–Ω–Ω–æ !")

@dp.message_handler(commands=["list"])
async def list(message: Message):
    tasks = Task_list.get_all()
    if not tasks:
        await message.reply("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!")
        return
    reply_text = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n"
    for i, task in enumerate(tasks):
        status = "üü©" if task.status == "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" else "üü•"
        reply_text += f"{i + 1}. {status} {task.title}\n"

    await message.reply(reply_text)

@dp.message_handler(commands=["delete"])
async def delete(message: Message):
    task_id = int(message.text[8:])  # –ü–æ–ª—É—á–∞–µ–º  –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "/delete "
    tasks = Task_list.get_all()

    if task_id < 1 or task_id > len(tasks):
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á!")
        return

    task = tasks[task_id - 1]
    Task_list.delete(task_id)
    await message.reply(f"–ó–∞–¥–∞—á–∞ '{task.title}' —É–¥–∞–ª–µ–Ω–∞!")

@dp.message_handler()
async def unknown(message: Message):
    await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

if __name__ == '__main__':
    
    create_table()
    executor.start_polling(dp, skip_updates=True)